using CommunityToolkit.Mvvm.ComponentModel; // Added for ObservableObject and [ObservableProperty]
using System.Windows.Threading; // Added for Dispatcher

namespace Mica.Services
{
    // Inherit from ObservableObject provided by Community Toolkit
    public partial class UserStore : ObservableObject, Interfaces.IUserStore
    {
        // Existing event
        // The event is typically public in the interface and implemented publicly here.
        public event Action<Entities.Dtos.UserDto?, bool>? OnUserSignChanged;


        public string? StoredUsername { get; set; }
        public Entities.Dtos.ConversationDto? StoredConversation { get; set; }

        // Use [ObservableProperty] to automatically implement INotifyPropertyChanged for this property
        // This property now automatically raises PropertyChanged(nameof(CurrentUser)) when set.
        [ObservableProperty]
        private Entities.Dtos.UserDto? currentUser = null; // Explicitly initialize to null

        // Constructor - Inject dependencies if needed in the future (e.g., logger)
        // public UserStore() { }

        public void SetUser(Entities.Dtos.UserDto? user)
        {
            // Use the generated property setter.
            // This will update the backing field and automatically call OnPropertyChanged(nameof(CurrentUser)).
            CurrentUser = user;

            // Manually invoke the event, ensuring thread safety for UI subscribers
            InvokeOnUserSignChanged(user, user != null);
        }

        // Helper method to safely invoke the OnUserSignChanged event
        private void InvokeOnUserSignChanged(Entities.Dtos.UserDto? user, bool isSigned)
        {
            // Get a copy of the event delegate to prevent issues if subscribers are added/removed
            Action<Entities.Dtos.UserDto?, bool>? handler = OnUserSignChanged;
            if (handler == null)
            {
                return;
            }

            // Get the list of subscribers
            Delegate[] subscribers = handler.GetInvocationList();

            foreach (Delegate sub in subscribers)
            {
                // Check if the subscriber's target is a DispatcherObject (like most UI elements)
                // and if we are not on the correct dispatcher thread.
                if (sub.Target is DispatcherObject dispatcherObject && !dispatcherObject.Dispatcher.CheckAccess())
                {
                    // If needed, invoke the subscriber on its dispatcher thread
                    try
                    {
                        dispatcherObject.Dispatcher.Invoke(() =>
                        {
                            ((Action<Entities.Dtos.UserDto?, bool>)sub).Invoke(user, isSigned);
                        });
                    }
                    catch (Exception ex)
                    {
                        // Log or handle exceptions that occur within an event subscriber
                        // This prevents one faulty subscriber from crashing others or the application
                        System.Diagnostics.Debug.WriteLine($"Error invoking OnUserSignChanged subscriber (Dispatcher.Invoke): {ex.Message}");
                        // Consider using a proper logging service here
                    }
                }
                else
                {
                    // If the subscriber is not a DispatcherObject, or we are already on the correct thread,
                    // invoke directly.
                    try
                    {
                        ((Action<Entities.Dtos.UserDto?, bool>)sub).Invoke(user, isSigned);
                    }
                    catch (Exception ex)
                    {
                        // Log or handle exceptions from subscribers invoked directly
                        System.Diagnostics.Debug.WriteLine($"Error invoking OnUserSignChanged subscriber (Direct Invoke): {ex.Message}");
                        // Consider using a proper logging service here
                    }
                }
            }
        }

        // The INotifyPropertyChanged implementation is automatically generated by [ObservableProperty]
        // and inheriting from ObservableObject.
    }
}